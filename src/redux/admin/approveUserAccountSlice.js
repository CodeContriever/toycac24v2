import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  users: [], // Holds list of users
  loading: false,
  error: null,
};

// In the getUsers async thunk, handle errors and payload structure
export const getUsers = createAsyncThunk("users/getUsers", async () => {
  try {
    const response = await axios.get("/api/admin/get_all_registered_users");
    return response.data; // Assuming the response contains an array of users
  } catch (error) {
    throw error; // Rethrow the error to be handled in the Redux action
  }
});

export const approveUser = createAsyncThunk(
  "users/approveUser",
  async (userId) => {
    try {
      const response = await axios.put(`/api/admin/${userId}`); // Adjusted endpoint
      console.log("approveUser response:", response); // Add this line
      return response.data;
    } catch (error) {
      console.error("approveUser error:", error); // Add this line
      return error.response.data;
    }
  }
);

const adminApproveUserAccountSlice = createSlice({
  name: "users",
  initialState,
  reducers: {
    setUsersData(state, action) {
      state.users = action.payload; // Simply set the users array to the payload
    },
    // Additional reducer to handle approval success
    approveUserSuccess(state, action) {
      // Find the approved user in the state and update its status
      const approvedUserId = action.payload.user._id;
      state.users = state.users.map((user) =>
        user._id === approvedUserId ? { ...user, approved: true } : user
      );
    },
  },
  // Handle action types generated by createAsyncThunk
  extraReducers: (builder) => {
    builder
      .addCase(getUsers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getUsers.fulfilled, (state, action) => {
        state.loading = false;
        state.users = action.payload; // Set users array to the payload
      })
      .addCase(getUsers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message; // Set error message from the rejected action
      })
      .addCase(approveUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(approveUser.fulfilled, (state, action) => {
        state.loading = false;
        // Assuming approval action doesn't affect users array
        // Instead, dispatch the custom approveUserSuccess action to update user status
        state.users = action.payload.user.approved
          ? state.users
          : state.users.concat(action.payload.user); // Update user list only if the user is not already approved
      })
      .addCase(approveUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message; // Set error message from the rejected action
      });
  },
});

export const { setUsersData, approveUserSuccess } =
  adminApproveUserAccountSlice.actions;

export default adminApproveUserAccountSlice.reducer;
